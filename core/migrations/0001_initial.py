# Generated by Django 5.2.1 on 2025-05-31 16:29

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicGrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('academic_year', models.CharField(default='2023-2024', max_length=9)),
            ],
        ),
        migrations.CreateModel(
            name='AnnouncementCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='默认分类', max_length=20, unique=True, verbose_name='分类名称')),
                ('slug', models.SlugField(choices=[('homework', '作业'), ('meeting', '会议'), ('survey', '调查'), ('activity', '活动'), ('academic', '学业'), ('other', '其他')], default='默认标识', max_length=20, unique=True, verbose_name='标识符')),
                ('color', models.CharField(default='#007bff', max_length=7, verbose_name='颜色代码')),
            ],
            options={
                'verbose_name': '通知分类',
                'verbose_name_plural': '通知分类',
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='默认活动类型', max_length=50, unique=True, verbose_name='类型名称')),
                ('slug', models.SlugField(default='default-event-type', unique=True, verbose_name='标识符')),
            ],
            options={
                'verbose_name': '活动类型',
                'verbose_name_plural': '活动类型',
            },
        ),
        migrations.CreateModel(
            name='Major',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='技能名称')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('student_id', models.CharField(help_text='必需：您的唯一学号', max_length=20, unique=True, verbose_name='学号')),
                ('email', models.EmailField(help_text='必需：您的有效邮箱地址', max_length=254, unique=True, verbose_name='邮箱地址')),
                ('full_name', models.CharField(max_length=100, verbose_name='真实姓名')),
                ('nickname', models.CharField(blank=True, max_length=50, verbose_name='昵称')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='media/avatars/', verbose_name='头像')),
                ('bio', models.TextField(blank=True, verbose_name='个人简介')),
                ('join_date', models.DateField(auto_now_add=True, verbose_name='加入日期')),
                ('is_teacher', models.BooleanField(default=False, verbose_name='教师身份')),
                ('phone_number', models.CharField(blank=True, default='', max_length=15, verbose_name='手机号码')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='标题')),
                ('content', models.TextField(verbose_name='内容')),
                ('category', models.CharField(choices=[('info', '一般信息'), ('warning', '重要通知'), ('event', '活动通知'), ('academic', '学业通知'), ('other', '其他')], default='info', max_length=20, verbose_name='分类')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('scope', models.CharField(choices=[('class', '班级'), ('grade', '年级'), ('major', '专业'), ('school', '全校')], default='class', max_length=10, verbose_name='可见范围')),
                ('is_pinned', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('attachment', models.FileField(blank=True, null=True, upload_to='announcements/', verbose_name='附件')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authored_announcements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '通知',
                'verbose_name_plural': '通知',
                'ordering': ['-is_pinned', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('grade', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='core.academicgrade')),
                ('major', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='core.major')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='class_belong',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', to='core.class', verbose_name='所属班级'),
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='课程名称')),
                ('code', models.CharField(max_length=20, unique=True, verbose_name='课程代码')),
                ('instructor', models.CharField(default='未知教师', max_length=100, verbose_name='授课教师')),
                ('semester', models.CharField(default='2023-2024学年', max_length=20, verbose_name='学期')),
                ('credit', models.PositiveSmallIntegerField(default=2, verbose_name='学分')),
                ('class_belong', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='core.class', verbose_name='开课班级')),
            ],
        ),
        migrations.CreateModel(
            name='CourseSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(choices=[(1, '星期一'), (2, '星期二'), (3, '星期三'), (4, '星期四'), (5, '星期五'), (6, '星期六'), (7, '星期日')], default=1, verbose_name='星期几')),
                ('start_time', models.TimeField(default=datetime.time(8, 0), verbose_name='开始时间')),
                ('end_time', models.TimeField(default=datetime.time(10, 0), verbose_name='结束时间')),
                ('location', models.CharField(default='未知教室', max_length=100, verbose_name='上课地点')),
                ('course', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='core.course')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('official', '正式活动'), ('casual', '随性邀请')], default='official', max_length=20, verbose_name='活动类型')),
                ('title', models.CharField(default='未命名活动', max_length=200, verbose_name='标题')),
                ('description', models.TextField(default='活动描述', verbose_name='描述')),
                ('location', models.CharField(blank=True, default='未知地点', max_length=200, verbose_name='地点')),
                ('start_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='开始时间')),
                ('end_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='结束时间')),
                ('visibility', models.CharField(choices=[('class', '班级'), ('grade', '年级'), ('major', '专业'), ('all', '全校')], default='class', max_length=10, verbose_name='可见范围')),
                ('capacity', models.PositiveIntegerField(blank=True, default=100, null=True, verbose_name='参与人数限制')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('creator', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '活动',
                'verbose_name_plural': '活动',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='未命名资料', max_length=200, verbose_name='资料标题')),
                ('file', models.FileField(upload_to='course_materials/', verbose_name='文件')),
                ('description', models.TextField(blank=True, default='', verbose_name='描述')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='上传时间')),
                ('course', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='materials', to='core.course')),
                ('uploaded_by', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_materials', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(default='消息内容', verbose_name='内容')),
                ('sent_at', models.DateTimeField(auto_now_add=True, verbose_name='发送时间')),
                ('read', models.BooleanField(default=False, verbose_name='已读')),
                ('visible_to_public', models.BooleanField(default=False, help_text='允许在接收者的个人主页上公开显示此消息', verbose_name='公开展示')),
                ('receiver', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='未命名帖子', max_length=200, verbose_name='标题')),
                ('content', models.TextField(default='帖子内容', verbose_name='内容')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('anonymous', models.BooleanField(default=False, verbose_name='匿名发表')),
                ('visibility', models.CharField(choices=[('class', '班级'), ('grade', '年级'), ('major', '专业'), ('all', '全校')], default='class', max_length=10, verbose_name='可见范围')),
                ('attachment', models.FileField(blank=True, null=True, upload_to='post_attachments/', verbose_name='附件')),
                ('author', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '帖子',
                'verbose_name_plural': '帖子',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(default='评论内容', verbose_name='内容')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('anonymous', models.BooleanField(default=False, verbose_name='匿名评论')),
                ('author', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.post')),
            ],
            options={
                'verbose_name': '评论',
                'verbose_name_plural': '评论',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='skills',
            field=models.ManyToManyField(blank=True, to='core.skill', verbose_name='技能标签'),
        ),
        migrations.CreateModel(
            name='CourseGrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=2, default=60.0, max_digits=5, verbose_name='分数')),
                ('exam_date', models.DateField(blank=True, default=datetime.date.today, null=True, verbose_name='考试日期')),
                ('is_final', models.BooleanField(default=True, verbose_name='是否期末成绩')),
                ('course', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='core.course')),
                ('student', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='grades', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '成绩',
                'verbose_name_plural': '成绩',
                'unique_together': {('student', 'course', 'is_final')},
            },
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registered_at', models.DateTimeField(auto_now_add=True, verbose_name='报名时间')),
                ('event', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='core.event')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='event_registrations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '活动报名',
                'verbose_name_plural': '活动报名',
                'unique_together': {('event', 'user')},
            },
        ),
    ]
